// portal 1

class PortalConfiguration{
	constructor(world, levelSource, levelDest, sourceX, sourceY, destX, destY){
		this.world = world;
		this.levelSource = levelSource;
		this.levelDest = levelDest;
		this.sourceX = sourceX;
		this.sourceY = sourceY;
		this.destX = destX;
		this.destY = destY;
	}

	getWorld(){return this.world;}
	getLevelSource(){return this.levelSource;}
	getLevelDest(){return this.levelDest;}
	getSourceX(){return this.sourceX;}
	getSourceY(){return this.sourceY;}
	getDestX(){return this.destX;}
	getDestY(){return this.destY;}	
}

class Portal extends Entity{
	constructor(ctx, canvas, pconfig){
		super(ctx, canvas, pconfig.getWorld(),
			pconfig.getSourceX(), pconfig.getSourceY(),
			MapContext.getTileSize() >> 1, MapContext.getTileSize() >> 1, "PaleTurquoise", 0, 0);

		println("Portal generation...");
		this.configuration = pconfig;
		this.radius = this.computeRadius(this.value);
		//this.configuration.getLevelSource().placePortalAt(this.configuration.getSourceX(), this.configuration.getSourceY());
		//this.configuration.getLevelDest().placePortalAt(this.configuration.getDestX(), this.configuration.getDestY());
		println("Portal: OK.");
	}

	update(){

	}

	interact(player){
		this.teleport(player);
	}

	teleport(player){
		this.world.teleportPlayer(this.configuration);
		//this.world.removePortal(this.configuration, this);
	}

	render(){
		ctx.save();
		ctx.beginPath();
    	ctx.ellipse(this.x, this.y, this.radius, this.radius + (this.radius >> 1), 45 * Math.PI / 180, 0, 2 * Math.PI);
    	ctx.fillStyle = this.color;
    	ctx.fill();
    	ctx.stroke();
    	ctx.restore();
	}

	computeRadius(value){
		return((value % 5) << 1) + (MapContext.getTileSize() >> 2);
	}

}